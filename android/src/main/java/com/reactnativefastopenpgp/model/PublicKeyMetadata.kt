// automatically generated by the FlatBuffers compiler, do not modify

package com.reactnativefastopenpgp.model

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class PublicKeyMetadata : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : PublicKeyMetadata {
        __init(_i, _bb)
        return this
    }
    val keyID : String?
        get() {
            val o = __offset(4)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val keyIDAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun keyIDInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val keyIDShort : String?
        get() {
            val o = __offset(6)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val keyIDShortAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun keyIDShortInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    val creationTime : String?
        get() {
            val o = __offset(8)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val creationTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun creationTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    val fingerprint : String?
        get() {
            val o = __offset(10)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val fingerprintAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun fingerprintInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    val keyIDNumeric : String?
        get() {
            val o = __offset(12)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val keyIDNumericAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun keyIDNumericInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    val isSubKey : Boolean
        get() {
            val o = __offset(14)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    fun mutateIsSubKey(isSubKey: Boolean) : Boolean {
        val o = __offset(14)
        return if (o != 0) {
            bb.put(o + bb_pos, (if(isSubKey) 1 else 0).toByte())
            true
        } else {
            false
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_1_12_0()
        fun getRootAsPublicKeyMetadata(_bb: ByteBuffer): PublicKeyMetadata = getRootAsPublicKeyMetadata(_bb, PublicKeyMetadata())
        fun getRootAsPublicKeyMetadata(_bb: ByteBuffer, obj: PublicKeyMetadata): PublicKeyMetadata {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createPublicKeyMetadata(builder: FlatBufferBuilder, keyIDOffset: Int, keyIDShortOffset: Int, creationTimeOffset: Int, fingerprintOffset: Int, keyIDNumericOffset: Int, isSubKey: Boolean) : Int {
            builder.startTable(6)
            addKeyIDNumeric(builder, keyIDNumericOffset)
            addFingerprint(builder, fingerprintOffset)
            addCreationTime(builder, creationTimeOffset)
            addKeyIDShort(builder, keyIDShortOffset)
            addKeyID(builder, keyIDOffset)
            addIsSubKey(builder, isSubKey)
            return endPublicKeyMetadata(builder)
        }
        fun startPublicKeyMetadata(builder: FlatBufferBuilder) = builder.startTable(6)
        fun addKeyID(builder: FlatBufferBuilder, keyID: Int) = builder.addOffset(0, keyID, 0)
        fun addKeyIDShort(builder: FlatBufferBuilder, keyIDShort: Int) = builder.addOffset(1, keyIDShort, 0)
        fun addCreationTime(builder: FlatBufferBuilder, creationTime: Int) = builder.addOffset(2, creationTime, 0)
        fun addFingerprint(builder: FlatBufferBuilder, fingerprint: Int) = builder.addOffset(3, fingerprint, 0)
        fun addKeyIDNumeric(builder: FlatBufferBuilder, keyIDNumeric: Int) = builder.addOffset(4, keyIDNumeric, 0)
        fun addIsSubKey(builder: FlatBufferBuilder, isSubKey: Boolean) = builder.addBoolean(5, isSubKey, false)
        fun endPublicKeyMetadata(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
