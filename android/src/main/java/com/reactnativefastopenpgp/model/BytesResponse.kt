// automatically generated by the FlatBuffers compiler, do not modify

package com.reactnativefastopenpgp.model

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class BytesResponse : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : BytesResponse {
        __init(_i, _bb)
        return this
    }
    fun output(j: Int) : UByte {
        val o = __offset(4)
        return if (o != 0) {
            bb.get(__vector(o) + j * 1).toUByte()
        } else {
            0u
        }
    }
    val outputLength : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    val outputAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun outputInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    fun mutateOutput(j: Int, output: UByte) : Boolean {
        val o = __offset(4)
        return if (o != 0) {
            bb.put(__vector(o) + j * 1, output.toByte())
            true
        } else {
            false
        }
    }
    val error : String?
        get() {
            val o = __offset(6)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val errorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun errorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_1_12_0()
        fun getRootAsBytesResponse(_bb: ByteBuffer): BytesResponse = getRootAsBytesResponse(_bb, BytesResponse())
        fun getRootAsBytesResponse(_bb: ByteBuffer, obj: BytesResponse): BytesResponse {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createBytesResponse(builder: FlatBufferBuilder, outputOffset: Int, errorOffset: Int) : Int {
            builder.startTable(2)
            addError(builder, errorOffset)
            addOutput(builder, outputOffset)
            return endBytesResponse(builder)
        }
        fun startBytesResponse(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addOutput(builder: FlatBufferBuilder, output: Int) = builder.addOffset(0, output, 0)
        fun createOutputVector(builder: FlatBufferBuilder, data: UByteArray) : Int {
            builder.startVector(1, data.size, 1)
            for (i in data.size - 1 downTo 0) {
                builder.addByte(data[i].toByte())
            }
            return builder.endVector()
        }
        fun startOutputVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(1, numElems, 1)
        fun addError(builder: FlatBufferBuilder, error: Int) = builder.addOffset(1, error, 0)
        fun endBytesResponse(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
